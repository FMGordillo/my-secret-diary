import Head from "next/head";
import { FormEvent } from "react";
import invariant from "tiny-invariant";
import { api } from "~/utils/api";

const sectionContainer = "mt-8 rounded-lg bg-gray-800/50 p-8"

export default function App() {
  const { data: diaries, refetch } = api.diary.getDiary.useQuery();
  const mutation = api.diary.createDiary.useMutation();

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    try {

      event.preventDefault();

      if (mutation.isLoading) {
        return;
      }

      const formData = new FormData(event.target as HTMLFormElement);
      const title = formData.get("title")?.toString();
      const content = formData.get("content")?.toString();

      invariant(title, "Title is required");
      invariant(content, "Content is required");

      void await mutation.mutateAsync({
        title,
        content,
      });

      refetch();
    } catch (error) {

      console.error(error)

    } finally {
      // @ts-ignore
      event.target.reset();
    }
  }

  return (
    <>
      <Head>
        <title>HOLA</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container mx-auto">
        <section className={sectionContainer}>
          <h2 className="text-2xl">Create a new diary</h2>
          <form className="mx-auto max-w-md" onSubmit={(formData) => void handleSubmit(formData)}>
            <div className="form-control">
              <label className="label">
                <span className="label-text">Title</span>
                <input name="title" type="text" className="input input-bordered w-full max-w-xs" />
              </label>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text">Your notes</span>
                <textarea name="content" className="textarea textarea-bordered textarea-md w-full max-w-xs"></textarea>
              </label>
            </div>

            <div className="mt-4 flex gap-4 justify-center">
              <button className="btn btn-primary">
                Send note
                {mutation.isLoading && (
                  <span className="loading loading-spinner"></span>
                )}
              </button>

              <button type="reset" className="btn btn-secondary">
                Clear
              </button>
            </div>
          </form>
        </section>

        <section className={sectionContainer}>
          <h2 className="text-2xl">Your diaries (top secret)</h2>
          <ul className="">
            {diaries?.map((diary) => (
              <div key={diary.id?.toString()} className="card mx-auto mb-8 max-w-md bg-base-100 shadow-xl">
                <div className="card-body">
                  <h2 className="card-title">{diary.title?.toString()}</h2>
                  <p>{diary.content?.toString()}</p>
                </div>
              </div>
              // <li key={diary.id?.toString()}>{diary.title?.toString()}</li>
            ))}
          </ul>
        </section>
      </div>
    </>
  );
}
